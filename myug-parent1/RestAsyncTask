public class RestAsynckTask extends AsyncTask<String, Void, String> {
    private String method;
    private AsyncTaskListener callback;
    private Context context;
    private ProgressDialog progressDialog;

    public RestAsynckTask(Context context,AsyncTaskListener callback,String method){
        this.context=context;
        this.callback=callback;
        this.method=method;

    }


    public static String format(String url, String... parms) {
        String[] encoded = new String[parms.length];
        for (int i = 0; i < parms.length; i++) {
            encoded[i] = Uri.encode(parms[i]);
        }
        return String.format(url, (String[]) encoded);
    }

    @Override
    protected void onPreExecute() {
        progressDialog=new ProgressDialog(context);
        progressDialog.setTitle("Loading...");
        progressDialog.show();

    }

    @Override
    protected String doInBackground(String... params) {
        String url = params[0];
        String response = null;
        HttpURLConnection connection = null;
        if (params.length > 1) {
            if (method.equals(Method.GET)) {
                url = format(url, (String[]) Arrays.copyOfRange(params, 1, params.length));
            } else if (params.length > 2) {
                url = format(url, (String[]) Arrays.copyOfRange(params, 1, params.length - 1));
            }
            try {
                URL call = new URL(url);
                connection = (HttpURLConnection) call.openConnection();
                connection.setRequestProperty("Content-Type", "application/json");
                connection.setRequestMethod(method);
                if(!method.equals(Method.GET)){
                    connection.setDoOutput(true);
                    BufferedOutputStream outputStream=new BufferedOutputStream(connection.getOutputStream());
                    outputStream.write(params[params.length-1].getBytes());
                    outputStream.flush();
                }
                int status=connection.getResponseCode();
                if(status==HttpURLConnection.HTTP_OK){
                    InputStream is=connection.getInputStream();
                    response=readValue(is);

                }else if (status == 400) {
                    InputStream is = connection.getErrorStream();
                    BufferedReader reader = new BufferedReader(new InputStreamReader(is));
                    StringBuilder builder = new StringBuilder();
                    String line;
                    while ((line = reader.readLine()) != null) {
                        builder.append(line);
                    }
                    reader.close();
                    Toast.makeText(context, "" + builder.toString(), Toast.LENGTH_SHORT).show();
                }
                connection.disconnect();
            } catch (Exception e) {

            }finally {
                if (connection != null) {
                    connection.disconnect();
                }
            }


        }

        return response;
    }

    @Override
    protected void onPostExecute(String s) {
        if (progressDialog != null && progressDialog.isShowing())
            progressDialog.dismiss();
        if(s!=null){
            callback.onSuccess(s);
        }
    }

    private String readValue(InputStream is) {
        BufferedReader br = null;
        StringBuilder sb = new StringBuilder();
        String line;
        try {
            br = new BufferedReader(new InputStreamReader(is));
            while ((line = br.readLine()) != null) {
                sb.append(line);
            }
        } catch (Exception e) {

        }
        return sb.toString();
    }

    enum Method {
        POST, GET, DELETE
    }
}
